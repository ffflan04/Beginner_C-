// コンストラクタとクラスについて
// クラスの中に変数等を使う場合、初期値を指定しておきたいケースなどがあります。そんな時に使うメソッドが、コンストラクタです。
// アクセス修飾子 ＋ 共通のクラス名()
// ポイントは、クラス名と同じ名前のメソッドであるという点です。
// メソッドの呼び出しをせずとも自動的に呼び出されます。
// インスタンス化した際に受け取る引数は、インスタンス化したクラス内でのみ適用される。

using System;

public class Lesson07
{
    public static void Main()
    {
        var player1 = new Player("戦士");  // Playerクラスをインスタンス化して参照先を変数に代入
        var player3 = new Player("魔女");
        var player2 = player1;
        player2.Walk();
        player3.Walk();
        // Playerが実際に値を持っている訳ではない。
        // いわば、Playerは参照先。
        // 裏付けは、Console.WriteLine(player1); -> Player 
        // つまり参照先をコピーしてるだけだね。
        // 見やすいように。
    }
}

// コンストラクタとは..
// クラスをインスタンス化する際に初期値を設定できます。
public class Player
{
    // このコンストラクタのコーディングは、newキーワードの引数を運用するための手続きを描いてるだけ。
    // 下記の変数を、フィールドと言います。
    // フィールドとはクラスに定義されてる変数のことです。
    // ローカル変数は、メソッドを内でしか利用できないが、
    // フィールドはオブジェクトが存在する限り、値が保持されます。
    // ちなみに、下記のこれは、ただのcharacter変数の宣言だよ。
    private string character;

    public Player(string name)  // newでインスタンス化する際に受け取れる引数を、name変数に代入。
    {
        this.character = name;
        // つまり、これは、ローカル変数をフィールドに代入している認識でおけ？
        // thisは現在のクラスのインスタンスを参照するキーワードです。
        // name = name; というコードにすると、thisをつけていないので、コンストラクター側で使う、
        // name変数を、全く同じコンストラクター側で使うname変数に代入することになってしまいます。
    }

    public void Walk()
    {
        Console.WriteLine(character + "は荒野を歩いていた");
    }
}